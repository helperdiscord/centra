(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{118:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function b(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){b(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},b=Object.keys(e);for(n=0;n<b.length;n++)r=b[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)r=b[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),l=c(r),u=n,m=l["".concat(i,".").concat(u)]||l[u]||d[u]||b;return r?a.a.createElement(m,s(s({ref:t},o),{},{components:r})):a.a.createElement(m,s({ref:t},o))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=r.length,i=new Array(b);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var o=2;o<b;o++)i[o]=r[o];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},82:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return c}));var n=r(3),a=r(7),b=(r(0),r(118)),i={id:"petitioresponse.petitioresponse-1",title:"Class: PetitioResponse",sidebar_label:"PetitioResponse",custom_edit_url:null,hide_title:!0},s={unversionedId:"pkg/classes/petitioresponse.petitioresponse-1",id:"version-1.2.0/pkg/classes/petitioresponse.petitioresponse-1",isDocsHomePage:!1,title:"Class: PetitioResponse",description:"Class: PetitioResponse",source:"@site/i18n/en-gb/docusaurus-plugin-content-docs/version-1.2.0/pkg/classes/petitioresponse.petitioresponse-1.md",slug:"/pkg/classes/petitioresponse.petitioresponse-1",permalink:"/docs/pkg/classes/petitioresponse.petitioresponse-1",editUrl:null,version:"1.2.0",lastUpdatedAt:1617817864,formattedLastUpdatedAt:"07/04/2021",sidebar_label:"PetitioResponse",sidebar:"version-1.2.0/docs",previous:{title:"Class: PetitioRequest",permalink:"/docs/pkg/classes/petitiorequest.petitiorequest-1"},next:{title:"Interface: TimeoutOptions",permalink:"/docs/pkg/interfaces/petitiorequest.timeoutoptions"}},p=[{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Properties",id:"properties",children:[{value:"body",id:"body",children:[]},{value:"headers",id:"headers",children:[]},{value:"statusCode",id:"statuscode",children:[]}]},{value:"Methods",id:"methods",children:[{value:"_addChunk",id:"_addchunk",children:[]},{value:"_parseHeaders",id:"_parseheaders",children:[]},{value:"json",id:"json",children:[]},{value:"text",id:"text",children:[]}]}],o={toc:p};function c(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},o,r,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"class-petitioresponse"},"Class: PetitioResponse"),Object(b.b)("p",null,Object(b.b)("a",{parentName:"p",href:"/docs/pkg/modules/petitioresponse"},"PetitioResponse"),".PetitioResponse"),Object(b.b)("h2",{id:"constructors"},"Constructors"),Object(b.b)("h3",{id:"constructor"},"constructor"),Object(b.b)("p",null,"+"," ",Object(b.b)("strong",{parentName:"p"},"new PetitioResponse"),"(): ",Object(b.b)("a",{parentName:"p",href:"/docs/pkg/classes/petitioresponse.petitioresponse-1"},Object(b.b)("em",{parentName:"a"},"PetitioResponse"))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",{parentName:"p",href:"/docs/pkg/classes/petitioresponse.petitioresponse-1"},Object(b.b)("em",{parentName:"a"},"PetitioResponse"))),Object(b.b)("h2",{id:"properties"},"Properties"),Object(b.b)("h3",{id:"body"},"body"),Object(b.b)("p",null,"\u2022 ",Object(b.b)("strong",{parentName:"p"},"body"),": ",Object(b.b)("em",{parentName:"p"},"Buffer")),Object(b.b)("p",null,"The response body received from the server.\nThis is updated in chunks through ",Object(b.b)("a",{parentName:"p",href:"/docs/pkg/classes/petitioresponse.petitioresponse-1#_addchunk"},"PetitioResponse._addChunk"),", either\nfrom ",Object(b.b)("a",{parentName:"p",href:"/docs/pkg/classes/petitiorequest.petitiorequest-1#send"},"PetitioRequest.send")," or directly on a response object from\nanother source."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L12"},"lib/PetitioResponse.ts:12")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"headers"},"headers"),Object(b.b)("p",null,"\u2022 ",Object(b.b)("strong",{parentName:"p"},"headers"),": ",Object(b.b)("em",{parentName:"p"},"object")),Object(b.b)("p",null,"The response headers received from the server.\nThis is updated through ",Object(b.b)("a",{parentName:"p",href:"/docs/pkg/classes/petitioresponse.petitioresponse-1#_parseheaders"},"PetitioResponse._parseHeaders"),"."),Object(b.b)("h4",{id:"type-declaration"},"Type declaration:"),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L17"},"lib/PetitioResponse.ts:17")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"statuscode"},"statusCode"),Object(b.b)("p",null,"\u2022 ",Object(b.b)("strong",{parentName:"p"},"statusCode"),": ",Object(b.b)("em",{parentName:"p"},"null")," ","|"," ",Object(b.b)("em",{parentName:"p"},"number"),"= null"),Object(b.b)("p",null,"The status code received from the server.\nThis is set only after the response is complete when headers are received\nor it can be set manually."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L23"},"lib/PetitioResponse.ts:23")),Object(b.b)("h2",{id:"methods"},"Methods"),Object(b.b)("h3",{id:"_addchunk"},"_","addChunk"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"_addChunk"),"(",Object(b.b)("inlineCode",{parentName:"p"},"chunk"),": ",Object(b.b)("em",{parentName:"p"},"Buffer")," ","|"," ",Object(b.b)("em",{parentName:"p"},"Uint8Array"),"): ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"This appends data to the body, dynamically reallocating the buffer size\nas chunks are added. Therefore, this is currently unsuitable for handling\nlarge responses, as the exact size is allocated in memory as a buffer."),Object(b.b)("h4",{id:"parameters"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"chunk")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"Buffer")," ","|"," ",Object(b.b)("em",{parentName:"td"},"Uint8Array")),Object(b.b)("td",{parentName:"tr",align:"left"},"The chunk of data to append to the body.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"In place operation with no return."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L32"},"lib/PetitioResponse.ts:32")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"_parseheaders"},"_","parseHeaders"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"_parseHeaders"),"(",Object(b.b)("inlineCode",{parentName:"p"},"headers"),": ",Object(b.b)("em",{parentName:"p"},"string"),"[]): ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("h4",{id:"parameters-1"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"headers")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"string"),"[]"),Object(b.b)("td",{parentName:"tr",align:"left"},"The headers to add. This is done by splitting the array into chunks of two, where the first value becomes the header and the latter becomes its value. This will also append values to the header as an array if it already exists.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"void")),Object(b.b)("p",null,"In place operation with no return."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L43"},"lib/PetitioResponse.ts:43")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"json"},"json"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"json"),"<T",">","(",Object(b.b)("inlineCode",{parentName:"p"},"encoding?"),": BufferEncoding): T"),Object(b.b)("h4",{id:"type-parameters"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Default"),Object(b.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"T")),Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("em",{parentName:"td"},"any")),Object(b.b)("td",{parentName:"tr",align:"left"},"Type casting parameter for the JSON result.")))),Object(b.b)("h4",{id:"parameters-2"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Default value"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"encoding")),Object(b.b)("td",{parentName:"tr",align:"left"},"BufferEncoding"),Object(b.b)("td",{parentName:"tr",align:"left"},'"utf8"')))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," T"),Object(b.b)("p",null,"A serialized object result parsed from the response body."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L62"},"lib/PetitioResponse.ts:62")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"text"},"text"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"text"),"(",Object(b.b)("inlineCode",{parentName:"p"},"encoding?"),": BufferEncoding): ",Object(b.b)("em",{parentName:"p"},"string")),Object(b.b)("h4",{id:"parameters-3"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"left"},"Name"),Object(b.b)("th",{parentName:"tr",align:"left"},"Type"),Object(b.b)("th",{parentName:"tr",align:"left"},"Default value"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"left"},Object(b.b)("inlineCode",{parentName:"td"},"encoding")),Object(b.b)("td",{parentName:"tr",align:"left"},"BufferEncoding"),Object(b.b)("td",{parentName:"tr",align:"left"},'"utf8"')))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("em",{parentName:"p"},"string")),Object(b.b)("p",null,"The response body decoded as as a string from the buffer, using either the encoding specified in ",Object(b.b)("inlineCode",{parentName:"p"},"encoding")," or UTF-8 by default.."),Object(b.b)("p",null,"Defined in: ",Object(b.b)("a",{parentName:"p",href:"https://github.com/helperdiscord/petitio/blob/c80cdcc/src/lib/PetitioResponse.ts#L70"},"lib/PetitioResponse.ts:70")))}c.isMDXComponent=!0}}]);